func Process() map[string]Status {
	data := map[string]Status{}
	db, err := sql.Open("sqlite3", "./data.db")
	CheckError(err)
	row, err := db.Query("SELECT * FROM polls")
	CheckError(err)
	defer row.Close()
	for row.Next() {
		var a, c string
		var b int
		row.Scan(&a, &b, &c)
		x, ok := data[a]
		if !ok {
			if b == 1 {
				data[a] = Status{
					active:   1,
					inactive: 0,
				}
			} else {
				data[a] = Status{
					active:   0,
					inactive: 1,
				}
			}
		} else {
			if b == 1 {
				x.active++
				data[a] = x
			} else {
				x.inactive++
				data[a] = x
			}
		}
	}
	return data
}



2399010391619681286
working hours
7am to 9:30pm all days

0 2023-01-25 18:01:41.474137 +0000 UTC
0 2023-01-25 17:03:12.089355 +0000 UTC
0 2023-01-25 16:03:34.75001 +0000 UTC
0 2023-01-25 15:08:38.048957 +0000 UTC
0 2023-01-25 14:05:36.320208 +0000 UTC
0 2023-01-25 13:05:27.383004 +0000 UTC
0 2023-01-25 12:08:10.283127 +0000 UTC
0 2023-01-25 11:05:53.198922 +0000 UTC
0 2023-01-25 10:09:38.009279 +0000 UTC
0 2023-01-25 09:08:02.31756 +0000 UTC
0 2023-01-25 08:02:20.242424 +0000 UTC
0 2023-01-25 07:04:20.665234 +0000 UTC
0 2023-01-25 06:01:53.977148 +0000 UTC
0 2023-01-25 05:01:35.319288 +0000 UTC
0 2023-01-25 04:01:21.561211 +0000 UTC
0 2023-01-25 03:05:00.471766 +0000 UTC
0 2023-01-25 02:01:39.933821 +0000 UTC
0 2023-01-25 01:01:26.514213 +0000 UTC
0 2023-01-25 00:03:35.077117 +0000 UTC
0 2023-01-24 23:01:10.849002 +0000 UTC
0 2023-01-24 22:05:27.903575 +0000 UTC
0 2023-01-24 21:01:40.541082 +0000 UTC
0 2023-01-24 20:01:38.556897 +0000 UTC
0 2023-01-24 19:01:21.718143 +0000 UTC
0 2023-01-24 18:02:02.730848 +0000 UTC
0 2023-01-24 17:01:23.505221 +0000 UTC
0 2023-01-24 16:07:39.23142 +0000 UTC
0 2023-01-24 15:01:43.174763 +0000 UTC
0 2023-01-24 14:04:47.877943 +0000 UTC
0 2023-01-24 13:04:42.713957 +0000 UTC
0 2023-01-24 12:01:47.84058 +0000 UTC
0 2023-01-24 11:01:27.500633 +0000 UTC
0 2023-01-24 10:01:41.271681 +0000 UTC
0 2023-01-24 09:04:32.860821 +0000 UTC
0 2023-01-24 08:01:47.985199 +0000 UTC
0 2023-01-24 07:04:41.20037 +0000 UTC
0 2023-01-24 06:02:00.290279 +0000 UTC
0 2023-01-24 05:54:07.833394 +0000 UTC
1 2023-01-22 13:03:06.519087 +0000 UTC
1 2023-01-22 12:01:02.940765 +0000 UTC
1 2023-01-22 10:00:57.53682 +0000 UTC
1 2023-01-22 07:00:46.378699 +0000 UTC
1 2023-01-22 06:00:56.264072 +0000 UTC
1 2023-01-22 05:00:57.27982 +0000 UTC
1 2023-01-22 03:00:59.64995 +0000 UTC
1 2023-01-21 23:00:56.057239 +0000 UTC
1 2023-01-21 19:01:31.374133 +0000 UTC
1 2023-01-21 17:02:13.661555 +0000 UTC
0 2023-01-21 16:00:45.777548 +0000 UTC
0 2023-01-21 15:08:03.736193 +0000 UTC
0 2023-01-21 12:01:50.084538 +0000 UTC
0 2023-01-21 11:02:16.05674 +0000 UTC
0 2023-01-21 10:01:25.77836 +0000 UTC
0 2023-01-21 09:00:53.575507 +0000 UTC
0 2023-01-21 08:01:06.160386 +0000 UTC
0 2023-01-21 07:01:13.704864 +0000 UTC
0 2023-01-21 06:01:10.593936 +0000 UTC
0 2023-01-21 05:00:53.120571 +0000 UTC
0 2023-01-21 04:01:11.487829 +0000 UTC
0 2023-01-21 03:00:47.33435 +0000 UTC
0 2023-01-21 02:00:55.888379 +0000 UTC
0 2023-01-21 01:01:00.25855 +0000 UTC
0 2023-01-21 00:01:28.591089 +0000 UTC
0 2023-01-20 23:00:58.798087 +0000 UTC
0 2023-01-20 22:01:13.892455 +0000 UTC
0 2023-01-20 21:00:56.886369 +0000 UTC
0 2023-01-20 20:01:07.728715 +0000 UTC
0 2023-01-20 19:02:01.230419 +0000 UTC
0 2023-01-20 18:01:00.511738 +0000 UTC
0 2023-01-20 17:00:52.141001 +0000 UTC
0 2023-01-20 16:01:38.975066 +0000 UTC
0 2023-01-20 15:00:57.461081 +0000 UTC
0 2023-01-20 14:00:50.505329 +0000 UTC
0 2023-01-20 13:01:00.213896 +0000 UTC
0 2023-01-20 12:00:53.598591 +0000 UTC
0 2023-01-20 11:01:02.714674 +0000 UTC
0 2023-01-20 10:00:59.774837 +0000 UTC
0 2023-01-20 09:00:51.16709 +0000 UTC
0 2023-01-20 08:00:49.578912 +0000 UTC
0 2023-01-20 07:00:59.199281 +0000 UTC
0 2023-01-20 06:04:32.811286 +0000 UTC
0 2023-01-20 05:32:09.821636 +0000 UTC
0 2023-01-19 19:42:33.188961 +0000 UTC
0 2023-01-19 18:32:05.125984 +0000 UTC
0 2023-01-19 17:18:54.592692 +0000 UTC
0 2023-01-19 16:16:25.406137 +0000 UTC
0 2023-01-19 15:15:21.386207 +0000 UTC
1 2023-01-19 14:30:28.664964 +0000 UTC
1 2023-01-19 14:22:48.634625 +0000 UTC
1 2023-01-19 13:45:00.307865 +0000 UTC
1 2023-01-19 13:08:42.607766 +0000 UTC
1 2023-01-19 12:21:31.822859 +0000 UTC
1 2023-01-19 11:53:16.349156 +0000 UTC
1 2023-01-19 11:10:24.884765 +0000 UTC
1 2023-01-19 10:59:57.411013 +0000 UTC
1 2023-01-19 09:49:26.338278 +0000 UTC
1 2023-01-19 09:26:07.135229 +0000 UTC
1 2023-01-19 07:31:15.477921 +0000 UTC
1 2023-01-19 06:29:36.220232 +0000 UTC
1 2023-01-19 05:12:24.86813 +0000 UTC
1 2023-01-19 04:31:01.752671 +0000 UTC
1 2023-01-19 03:02:11.169167 +0000 UTC
1 2023-01-19 02:15:27.31802 +0000 UTC
1 2023-01-19 01:02:14.337292 +0000 UTC
1 2023-01-19 00:01:03.015626 +0000 UTC
1 2023-01-18 23:25:38.100834 +0000 UTC
1 2023-01-18 21:16:37.793054 +0000 UTC
1 2023-01-18 20:13:16.568983 +0000 UTC
1 2023-01-18 19:46:59.486472 +0000 UTC
1 2023-01-18 18:20:17.908617 +0000 UTC
1 2023-01-18 17:49:18.544257 +0000 UTC
1 2023-01-18 16:10:51.527847 +0000 UTC








// calculating uptime and downtime in the last day
	lastDayTime := referenceTime.timestampOfPoll.Add(-time.Hour * 23) // 23 since we have already counted the values for 1 hr
	timeToCheckFrom = *pollsData[storeId][ind].timestampOfPoll
	uptimeLastDay, downtimeLastDay := uptimeLastHour, downtimeLastHour

	for i := ind; i < n-1; i++ {
		// startTime, endTime := FindStartAndEndtime(storeId, referenceTime.timestampOfPoll.Day(), referenceTime.timestampOfPoll, timezone)

		if timeToCheckFrom.Before(lastDayTime) { // we are checking 'before' because it is sorted in decreasing order.
			break
		}

		if pollsData[storeId][i].status == 1 {
			// extrapolation
			if pollsData[storeId][i+1].status != pollsData[storeId][i].status {
				timeToCheckTill = pollsData[storeId][i].timestampOfPoll.Truncate(time.Hour)
				uptimeLastDay += int(timeToCheckFrom.Sub(timeToCheckTill))
				timeToCheckFrom = timeToCheckTill
				continue
			}

			// if pollsData[storeId][i+1].timestampOfPoll.Before(startTime) {
			// 	timeToCheckTill = startTime
			// } else if pollsData[storeId][i+1].timestampOfPoll.After(endTime) {
			// 	timeToCheckFrom = endTime
			// }

			if timeToCheckTill.Before(lastHourTime) {
				timeToCheckTill = lastHourTime
			} else {
				timeToCheckTill = *pollsData[storeId][i+1].timestampOfPoll
			}
			uptimeLastDay += int(timeToCheckFrom.Sub(timeToCheckTill))
			timeToCheckFrom = timeToCheckTill
		} else {
			// extrapolation
			if pollsData[storeId][i+1].status != pollsData[storeId][i].status {
				timeToCheckTill = pollsData[storeId][i].timestampOfPoll.Truncate(time.Hour)
				downtimeLastDay += int((timeToCheckFrom.Sub(timeToCheckTill)))
				timeToCheckFrom = timeToCheckTill
				continue
			}

			// if pollsData[storeId][i+1].timestampOfPoll.Before(startTime) {
			// 	timeToCheckTill = startTime
			// } else if pollsData[storeId][i+1].timestampOfPoll.After(endTime) {
			// 	timeToCheckFrom = endTime
			// }

			if timeToCheckTill.Before(lastHourTime) {
				timeToCheckTill = lastHourTime
			} else {
				timeToCheckTill = *pollsData[storeId][i+1].timestampOfPoll
			}
			downtimeLastDay += int(timeToCheckFrom.Sub(timeToCheckTill))
			timeToCheckFrom = timeToCheckTill
		}
		ind++
	}
	fmt.Println("uptime last day: ", uptimeLastDay, "downtime last day: ", downtimeLastDay)